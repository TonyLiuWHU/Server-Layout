
//以下是具体的实现(C / C++) :
	/***************************************
	* About:    有向图的Dijkstra算法实现
	* Author:   Tanky Woo
	* Blog:     www.WuTianQi.com
	***************************************/

#include <iostream>

#define INF    (~(0x1<<31))        // 无穷大(即0X7FFFFFFF)

using namespace std;

const int maxnum = 100;
const int maxint = 999999;



void Dijkstra(int n, int v, int *dist, int *prev, int c[maxnum][maxnum])
{
	bool s[maxnum];    // 判断是否已存入该点到S集合中
	for (int i = 1; i <= n; ++i)
	{
		dist[i] = c[v][i];
		s[i] = 0;     // 初始都未用过该点
		if (dist[i] == maxint)
			prev[i] = 0;
		else
			prev[i] = v;
	}
	dist[v] = 0;
	s[v] = 1;

	// 依次将未放入S集合的结点中，取dist[]最小值的结点，放入结合S中
	// 一旦S包含了所有V中顶点，dist就记录了从源点到所有其他顶点之间的最短路径长度
	for (int i = 2; i <= n; ++i)
	{
		int tmp = maxint;
		int u = v;
		// 找出当前未使用的点j的dist[j]最小值
		for (int j = 1; j <= n; ++j)
			if ((!s[j]) && dist[j]<tmp)
			{
				u = j;              // u保存当前邻接点中距离最小的点的号码
				tmp = dist[j];
			}
		s[u] = 1;    // 表示u点已存入S集合中

					 // 更新dist
		for (int j = 1; j <= n; ++j)
			if ((!s[j]) && c[u][j]<maxint)
			{
				int newdist = dist[u] + c[u][j];
				if (newdist < dist[j])
				{
					dist[j] = newdist;
					prev[j] = u;
				}
			}
	}
}

void searchPath(int *prev, int v, int u)
{
	int que[maxnum];
	int tot = 1;
	que[tot] = u;
	tot++;
	int tmp = prev[u];
	while (tmp != v)
	{
		que[tot] = tmp;
		tot++;
		tmp = prev[tmp];
	}
	que[tot] = v;
	for (int i = tot; i >= 1; --i)
		if (i != 1)
			cout << que[i] << " -> ";
		else
			cout << que[i] << endl;
}

int main()
{
	//freopen("input.txt", "r", stdin);
	// 各数组都从下标1开始
	int dist[maxnum];     // 表示当前点到源点的最短路径长度
	int prev[maxnum];     // 记录当前点的前一个结点
	int c[maxnum][maxnum];   // 记录图的两点间路径长度
	int n, line;             // 图的结点数和路径数

							 // 输入结点数
	cin >> n;
	n = 7;
	
	// 输入路径数
	cin >> line;
	line = 
	int p, q, len;          // 输入p, q两点及其路径长度

							// 初始化c[][]为maxint
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= n; ++j)
			c[i][j] = maxint;

	int matrix[][9] = {
		/*A*//*B*//*C*//*D*//*E*//*F*//*G*/
		/*A*/{ 0,  12, INF, INF, INF,  16,  14 },
		/*B*/{ 12,   0,  10, INF, INF,   7, INF },
		/*C*/{ INF,  10,   0,   3,   5,   6, INF },
		/*D*/{ INF, INF,   3,   0,   4, INF, INF },
		/*E*/{ INF, INF,   5,   4,   0,   2,   8 },
		/*F*/{ 16,   7,   6, INF,   2,   0,   9 },
		/*G*/{ 14, INF, INF, INF,   8,   9,   0 } };

	for (int i = 1; i <= line; ++i)
	{
		cin >> p >> q >> len;
		if (len < c[p][q])       // 有重边
		{
			c[p][q] = len;      // p指向q
			c[q][p] = len;      // q指向p，这样表示无向图
		}
	}

	for (int i = 1; i <= n; ++i)
		dist[i] = maxint;
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= n; ++j)
			printf("%8d", c[i][j]);
		printf("\n");
	}

	Dijkstra(n, 1, dist, prev, c);

	// 最短路径长度
	cout << "源点到最后一个顶点的最短路径长度: " << dist[n] << endl;

	// 路径
	cout << "源点到最后一个顶点的路径为: ";
	searchPath(prev, 1, n);
}
//输入数据:
//5
//7
//1 2 10
//1 4 30
//1 5 100
//2 3 50
//3 5 10
//4 3 20
//4 5 60
//输出数据:
//999999 10 999999 30 100
//10 999999 50 999999 999999
//999999 50 999999 20 10
//30 999999 20 999999 60
//100 999999 10 60 999999
//源点到最后一个顶点的最短路径长度 : 60
//	源点到最后一个顶点的路径为 : 1 -> 4 -> 3 -> 5
//	最后给出两道题目练手，都是直接套用模版就OK的：
//	1.HDOJ 1874 畅通工程续
//	http ://www.wutianqi.com/?p=1894
//2.HDOJ 2544 最短路
//http ://www.wutianqi.com/?p=1892

